#!/usr/bin/env python
import PySimpleGUI as sg
from matplotlib.backends.backend_agg import FigureCanvasAgg
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
from numpy.random import rand
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import numpy as np
from scipy import ndimage
import matplotlib.patches as mpatches
from config import sim_data


def draw_figure(canvas, figure):
    figure_canvas_agg = FigureCanvasTkAgg(figure, canvas)
    figure_canvas_agg.draw()
    figure_canvas_agg.get_tk_widget().pack(side='top', fill='both', expand=1)
    return figure_canvas_agg


# TODO: Add flexibility to the size for the each computer

def plot(input_name='', folder_name='', skip=sim_data.params.number_of_skip_data):
    """
    Three things happen here:
    1) Set the related directory inputted from main window and import actual coordinates, estimated coordinates, time, and
    relative heading.
    2)If needed skip some data points to show quick simulation.
    3)According to imported datas, three plot will be plotted:
        a) Simulation scenario
        b) X coordinate estimates
        c) Y coordinate estimates

    """
    # a)
    fl_name = folder_name
    folder_name = 'GUI_data/100_point_202/' + folder_name
    x, y = np.loadtxt(folder_name + 'x.txt', delimiter=','), np.loadtxt(folder_name + 'y.txt', delimiter=',')
    x_pose, y_pose = np.loadtxt(folder_name + 'x_pose.txt', delimiter=','), np.loadtxt(folder_name + 'y_pose.txt',
                                                                                       delimiter=',')
    x_becha, y_becha = np.loadtxt(folder_name + 'x_becha.txt', delimiter=','), np.loadtxt(folder_name + 'y_becha.txt',
                                                                                          delimiter=',')
    x_roberts, y_roberts = np.loadtxt(folder_name + 'x_roberts.txt', delimiter=','), np.loadtxt(
        folder_name + 'y_roberts.txt',
        delimiter=',')
    x_data, y_data = np.loadtxt(folder_name + 'x_data.txt', delimiter=','), np.loadtxt(folder_name + 'y_data.txt',
                                                                                       delimiter=',')
    time_ = np.loadtxt(folder_name + 'time.txt', delimiter=',')
    rel_hdg = np.loadtxt(folder_name + 'rel_hdg.txt', delimiter=',')
    NUM_DATAPOINTS = len(x)

    # b
    x, y = x[::skip], y[::skip]
    x_pose, y_pose = x_pose[::skip], y_pose[::skip]
    x_roberts, y_roberts = x_roberts[::skip], y_roberts[::skip]
    x_becha, y_becha = x_becha[::skip], y_becha[::skip]
    x_data, y_data = x_data[::skip], y_data[::skip]
    time_, rel_hdg = time_[::skip], rel_hdg[::skip]

    # c
    # define the form layout
    sg.theme('Dark Teal 10')
    layout = [
        [sg.Text('Real Time Simulation Of Chosen Scenario', size=(40, 1), justification='center', font='Helvetica 20')],
        [sg.Canvas(key='-CANVAS-')],
        [sg.Button('Exit', size=(10, 2), pad=((280, 0), 3), font='Helvetica 14')]]

    # create the form and show it without the plot
    window = sg.Window('Simulation', layout, finalize=True, location=(0, 0), size=(1800, 950))
    window.Maximize()

    canvas_elem = window['-CANVAS-']
    canvas = canvas_elem.TKCanvas
    # draw the intitial scatter plot
    fig, (ax1, ax2, ax3) = plt.subplots(3, 1)
    ax1.set_xlabel("X axis")
    ax1.set_ylabel("Y axis")
    ax1.grid()
    ax2.set_xlabel("Time axis")
    ax2.set_ylabel("X axis")
    ax2.grid()
    ax3.set_xlabel("Time axis")
    ax3.set_ylabel("Y axis")
    ax3.grid()
    DPI = fig.get_dpi()
    fig.set_size_inches(800 * 2 / float(DPI), 850 / float(DPI))
    fig_agg = draw_figure(canvas, fig)
    fig.tight_layout()
    for i in range(NUM_DATAPOINTS):
        event, values = window.read(timeout=50)
        if event in ('Exit', None):
            exit(69)
        # img_ego_s = ndimage.rotate(plt.imread('red_racing_car_top_view_preview.png'), rel_hdg[0])
        img_ego_s = plt.imread(sim_data.params.img_ego_s_dir)
        img_tgt_s = plt.imread(sim_data.params.img_tgt_s_dir)
        img_tgt_f = plt.imread(sim_data.params.img_tgt_f_dir)
        # img_tgt_s = ndimage.rotate(plt.imread('green_racing_car_top_view_preview.png'), rel_hdg[0])
        # img_tgt_f = ndimage.rotate(plt.imread('green_racing_car_top_view_preview.png'), rel_hdg[-1])
        if fl_name == '/3/':
            ax1.add_artist(
                AnnotationBbox(OffsetImage(img_ego_s, zoom=0.25), (0, 0),
                               frameon=False))

            ax1.add_artist(AnnotationBbox(OffsetImage(img_tgt_s, zoom=0.08),
                                          (x[0][0] - 0.27, y[0][0] + 0.2), frameon=False))
            if i == (len(x_data) - 1):
                ax1.add_artist(AnnotationBbox(OffsetImage(img_tgt_f, zoom=0.08),
                                              (x[-1][0] - 0.27, y[-1][0] + 0.2), frameon=False))
        elif fl_name == '/2/':
            ax1.add_artist(
                AnnotationBbox(OffsetImage(img_ego_s, zoom=0.25), (0, 0),
                               frameon=False))

            ax1.add_artist(AnnotationBbox(OffsetImage(img_tgt_s, zoom=0.08),
                                          (x[1][0], y[1][0]), frameon=False))
            if i == (len(x_data) - 1):
                ax1.add_artist(AnnotationBbox(OffsetImage(img_tgt_f, zoom=0.08),
                                              (x[-1][0], y[-1][0]), frameon=False))
        elif fl_name == '/1/':
            ax1.add_artist(
                AnnotationBbox(OffsetImage(img_ego_s, zoom=0.25), (0, 0),
                               frameon=False))

            ax1.add_artist(AnnotationBbox(OffsetImage(img_tgt_s, zoom=0.08),
                                          (x[0][0], y[0][0]), frameon=False))
            if i == (len(x_data) - 1):
                ax1.add_artist(AnnotationBbox(OffsetImage(img_tgt_f, zoom=0.08),
                                              (x[-1][0], y[-1][0]), frameon=False))

        if fl_name == '/2/':
            if i > 0:
                ax1.plot(x[i, 0], y[i, 0], 'o', color='green', markersize=7)
                ax1.title.set_text('Fig.1: Relative Target Vehicle Trajectory')
                ax1.plot(x[i, 0], y[i, 0], '-', color='red', markersize=5)
        else:
            ax1.plot(x[i, 0], y[i, 0], 'o', color='green', markersize=7)
            ax1.title.set_text('Fig.1: Relative Target Vehicle Trajectory')
            ax1.plot(x[i, 0], y[i, 0], '-', color='red', markersize=5)
            mid = 25
            arrow_x = x[mid, 0]
            arrow_y = y[mid, 0]
            if i == mid and fl_name == '/3/':
                ax1.arrow(arrow_x, arrow_y, -0.5, 0, width=0.05)
        if fl_name == '/3/':
            ax1.set_xlim(-8, 1)
            ax1.set_ylim(-1, 4)
        elif fl_name == '/2/':
            ax1.set_xlim(-10, 1)
            ax1.set_ylim(-5, 5)
        elif fl_name == '/1/':
            ax1.set_xlim(-9, 1)
            ax1.set_ylim(-3, 6)
        ax1.grid()
        green_patch = mpatches.Patch(color='green', label='Target Vehicle')
        red_patch = mpatches.Patch(color='red', label='Ego Vehicle')
        ax1.legend(handles=[green_patch, red_patch])
        ax1.set_xlabel('Ego Frame x [m]')
        ax1.set_ylabel('Ego Frame y [m]')

        ax2.plot(time_[i], x[i, 0], 'o', color='green')
        if i > 0:
            ax2.plot(time_[i - 1:i + 1:1], x_pose[i - 1:i + 1:1, 0], '-', color='blue')
            ax2.plot(time_[i - 1:i + 1:1], x_roberts[i - 1:i + 1:1, 0], '-', color='purple')
            ax2.plot(time_[i - 1:i + 1:1], x_becha[i - 1:i + 1:1, 0], '-', color='orange')
        ax2.set_xlabel('Time [s]')
        ax2.set_ylabel('[m]')
        if fl_name == '/3/':
            ax2.set_ylim(x[0, 0] - 0.5, x[-1, 0] + 0.5)
            ax2.set_xlim(0, 10)
        elif fl_name == '/1/':
            ax2.set_xlim(0, 1)
            ax2.set_ylim(-7, -2)
        elif fl_name == '/2/':
            ax2.set_xlim(0, 1)
            ax2.set_ylim(-9, -2)
        ax2.grid()
        green_patch = mpatches.Patch(color='green', label='Actual coordinates')
        blue_patch = mpatches.Patch(color='blue', label='AoA-estimated coordinates')
        orange_patch = mpatches.Patch(color='orange', label='RToF-estimated coordinates')
        purple_patch = mpatches.Patch(color='purple', label='TDoA-estimated coordinates')
        ax2.legend(handles=[green_patch, blue_patch, orange_patch, purple_patch])
        ax2.title.set_text('Fig 2: x Estimation Results')
        ax3.title.set_text('Fig 3: y Estimation Results')
        ax3.plot(time_[i], y[i, 0], 'o', color='green')
        if i > 0:
            ax3.plot(time_[i - 1:i + 1:1], y_pose[i - 1:i + 1:1, 0], '-', color='blue')
            ax3.plot(time_[i - 1:i + 1:1], y_roberts[i - 1:i + 1:1, 0], '-', color='purple')
            ax3.plot(time_[i - 1:i + 1:1], y_becha[i - 1:i + 1:1, 0], '-', color='orange')
        ax3.set_xlabel('Time [s]')
        ax3.set_ylabel('[m]')
        if fl_name == '/3/':
            ax3.set_ylim(y[0, 0] - 1, y[-1, 0] + 1)
            ax3.set_xlim(0, 10)
        elif fl_name == '/1/':
            ax3.set_xlim(0, 1)
            ax3.set_ylim(-4, 4)
        elif fl_name == '/2/':
            ax3.set_xlim(0, 1)
            ax3.set_ylim(-5, 5)
        ax3.grid()
        green_patch = mpatches.Patch(color='green', label='Actual coordinates')
        blue_patch = mpatches.Patch(color='blue', label='AoA-estimated coordinates')
        orange_patch = mpatches.Patch(color='orange', label='RToF-estimated coordinates')
        purple_patch = mpatches.Patch(color='purple', label='TDoA-estimated coordinates')
        ax3.legend(handles=[green_patch, blue_patch, orange_patch, purple_patch])

        ax1.grid(True)
        ax2.grid(True)
        ax3.grid(True)
        fig_agg.draw()

    window.close()


def main():
    """
    Main GUI will be plotted here. According to selected scenario, the real time simulation plot will be shown.
    """
    import PySimpleGUI as sg
    sg.theme('Dark Teal 12')
    size_width = sim_data.params.size_width
    size_height = sim_data.params.size_height
    button_three = b'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'
    button_two = b''
    button_one = b''

    layout = [
        [
            sg.Graph(
                canvas_size=(size_width, size_height),
                graph_bottom_left=(0, 0),
                graph_top_right=(size_width, size_height),
                key="graph"
            ),
            sg.Button('Plot #1', image_data=button_one),
            sg.Button('Plot #2', image_data=button_two),
            sg.Button('Plot #3', image_data=button_three), sg.Cancel()
        ]
    ]

    window = sg.Window("Choose Scenario", layout)
    window.Finalize()
    window.Maximize()
    graph = window.Element("graph")

    graph.DrawImage(filename=sim_data.names.intro_img_dir_name, location=(0, size_height))

    while True:
        event, values = window.Read()
        if event in (sg.WIN_CLOSED, 'Cancel'):
            break
        elif event == 'Plot #1':
            input_name = sim_data.names.data_names[0]
            folder_name = sim_data.names.folder_names[0]
            plot(input_name, folder_name)
        elif event == 'Plot #2':
            input_name = sim_data.names.data_names[1]
            folder_name = sim_data.names.folder_names[1]
            plot(input_name, folder_name)
        elif event == 'Plot #3':
            input_name = sim_data.names.data_names[2]
            folder_name = sim_data.names.folder_names[2]
            plot(input_name, folder_name)
    window.close()


if __name__ == '__main__':
    main()
